[
    {
        "description": "[Functionality] Supported expression tests - Character Maps [\\w, \\d, \\s, \\W, \\D, \\S, \\p, \\t, \\.].",
        "batch_test": [
            {
                "description": "\\w test: Includes all letters, digits, @ and _ characters.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\w+)' pattern",
                "pattern": "(\\w+\\w)$",
                "log": "\t\r !\"#$%&()*+,./:;<=>?[\\]^`{|}~0123456789_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                "end_match": "z",
                "captured_groups": [
                    "0123456789_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                ]
            },
            {
                "description": "\\d test: Only digits.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\d+)' pattern",
                "pattern": "(\\d+\\d)$",
                "log": "\t\r !\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                "end_match": "9",
                "captured_groups": [
                    "0123456789"
                ]
            },
            {
                "description": "\\s test: space character ' '.",
                "pattern": "(\\s+)",
                "log": "\t\r!\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ",
                "end_match": " ",
                "captured_groups": [
                    " "
                ]
            },
            {
                "description": "\\t test: tab character '\\t'.",
                "pattern": "(\\t+)",
                "log": "\r !\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\t",
                "end_match": "\t",
                "captured_groups": [
                    "\t"
                ]
            },
            {
                "description": "\\p test: symbols characters '()*+,-.:;<=>?[]!\"'#$%&|{}'.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\p+)' pattern",
                "pattern": "(\\p+\\p)$",
                "log": "\r\t /\\^`~_@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789()*+,-.:;<=>?[]!\"'#$%&|{}",
                "end_match": "}",
                "captured_groups": [
                    "()*+,-.:;<=>?[]!\"'#$%&|{}"
                ]
            },
            {
                "description": "\\W test: Anything not \\w.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\W+)' pattern",
                "pattern": "(\\W+\\W)$",
                "log": "0123456789_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\t\r !\"#$%&()*+,./:;<=>?[\\]^`{|}~",
                "end_match": "~",
                "captured_groups": [
                    "\t\r !\"#$%&()*+,./:;<=>?[\\]^`{|}~"
                ]
            },
            {
                "description": "\\D test: Anything not \\d.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\D+)' pattern",
                "pattern": "(\\D+\\D)$",
                "log": "0123456789_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\t !\"#$%&()*+,./:;<=>?[\\]^`{|}~",
                "end_match": "~",
                "captured_groups": [
                    "_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\t !\"#$%&()*+,./:;<=>?[\\]^`{|}~"
                ]
            },
            {
                "description": "\\S test: Anything not \\s.",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\S+)' pattern",
                "pattern": "(\\S+\\S)$",
                "log": " \r\t!\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                "end_match": "9",
                "captured_groups": [
                    "\r\t!\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
                ]
            },
            {
                "description": "\\. test: Anything",
                "__knowIssue:": "The pattern was designed this way due to know issue. Workaround for '(\\S+)' pattern",
                "pattern": "(\\.+\\.)$",
                "log": " \r\t!\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                "end_match": "9",
                "captured_groups": [
                    " \r\t!\"#$%&()*+,./:;<=>?[\\]^`{|}~_-@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
                ]
            }
        ]
    },
    {
        "description": "[Functionality] Modifiers (+ and *)",
        "batch_test": [
            {
                "description": "[+] It should not match since there are no characters of the type `\\d`.",
                "pattern": "(\\d+)",
                "log": "asd_ _qwe",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "[+] It should match one time",
                "pattern": "(\\d+)",
                "log": "asd_1_qwe",
                "end_match": "1_qwe",
                "captured_groups": [
                    "1"
                ]
            },
            {
                "description": "[+]",
                "pattern": "(\\d+)",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "debug": false,
                "log": "asd_12_qwe",
                "end_match": "2_qwe",
                "captured_groups": [
                    "12"
                ]
            },
            {
                "description": "[+]",
                "pattern": "(\\d+)",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "log": "asd_123_qwe",
                "end_match": "3_qwe",
                "captured_groups": [
                    "123"
                ]
            },
            {
                "description": "[*] It should not match since there are no characters of the type `\\d`.",
                "skip_test": true,
                "pattern": "(\\d*)",
                "ignore_result": true,
                "log": " asd_ _qwe",
                "end_match": " asd_ _qwe",
                "captured_groups": [
                    ""
                ]
            },
            {
                "description": "[*] It should match one time",
                "skip_test": true,
                "pattern": "(\\d*)",
                "log": "asd_1_qwe",
                "end_match": "1_qwe",
                "captured_groups": [
                    "1"
                ]
            },
            {
                "description": "[*]",
                "skip_test": true,
                "pattern": "(\\d*)",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "log": "asd_12_qwe",
                "end_match": "2_qwe",
                "captured_groups": [
                    "12"
                ]
            },
            {
                "description": "[+]",
                "skip_test": true,
                "pattern": "(\\d*)",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "log": "asd_123_qwe",
                "end_match": "3_qwe",
                "captured_groups": [
                    "123"
                ]
            }
        ]
    },
    {
        "description": "[Functionality] Special characters escaping (\\$ \\( \\) \\\\ \\| \\<)",
        "batch_test": [
            {
                "description": "Using the '\\p+' token to test matching all the special characters with capture group. Note: the character '\\' is not captured by the token '\\p'.",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "pattern": "(\\p+)",
                "log": "Special characters are $()|<\\",
                "end_match": "\\",
                "captured_groups": [
                    "$()|<"
                ]
            },
            {
                "description": "Using the '\\p+' token to test matching all the special characters without capture group. Note: the character '\\' is not captured by the token '\\p'.",
                "pattern": "\\p+",
                "log": "Special characters are $()|<\\",
                "end_match": "\\",
                "captured_groups": []
            },
            {
                "description": "Using the '\\p*' token to test matching all the special characters with capture group. Note: the character '\\' is not captured by the token '\\p'.",
                "pattern": "Special characters are (\\p*)",
                "log": "Special characters are $()|<\\",
                "end_match": "<\\",
                "captured_groups": [
                    "$()|<"
                ]
            },
            {
                "description": "Using the '\\p*' token to test matching all the special characters without capture group. Note: the character '\\' is not captured by the token '\\p'.",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "pattern": "Special characters are \\p*",
                "log": "Special characters are $()|<\\",
                "end_match": "<\\",
                "captured_groups": []
            },
            {
                "description": "Using the '\\.+' token to test matching the character '\\' with capture group.",
                "pattern": "Backslash character is (\\.+)",
                "log": "Backslash character is \\",
                "end_match": "\\",
                "captured_groups": [
                    "\\"
                ]
            },
            {
                "description": "Using the '\\.+' token to test matching the character '\\' without capture group.",
                "pattern": "Backslash character is \\.+",
                "log": "Backslash character is \\",
                "end_match": "\\",
                "captured_groups": []
            },
            {
                "description": "Using the '\\.*' token to test matching the character '\\' with capture group.",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "pattern": "Backslash character is (\\.*)",
                "log": "Backslash character is \\",
                "end_match": "\\",
                "captured_groups": [
                    "\\"
                ]
            },
            {
                "description": "Using the '\\.*' token to test matching the character '\\' without capture group.",
                "ignore_result": true,
                "__knowIssue": "Link github issue ####",
                "pattern": "Backslash character is \\.*",
                "log": "Backslash character is \\",
                "end_match": "\\",
                "captured_groups": []
            },
            {
                "description": "Using the '\\d*' token to test NOT matching all the special characters with capture group.",
                "pattern": "Special characters are (\\d*)",
                "log": "Special characters are $()|<\\",
                "end_match": " $()|<\\",
                "captured_groups": [
                    ""
                ]
            },
            {
                "description": "Using the '\\d*' token to test NOT matching all the special characters without capture group.",
                "pattern": "Special characters are \\d*",
                "log": "Special characters are $()|<\\",
                "end_match": " $()|<\\",
                "captured_groups": []
            },
            {
                "description": "Using the '\\w*' token to test NOT matching all the special characters with capture group.",
                "pattern": "Special characters are (\\w*)",
                "log": "Special characters are $()|<\\",
                "end_match": " $()|<\\",
                "captured_groups": [
                    ""
                ]
            },
            {
                "description": "Using the '\\w*' token to test NOT matching all the special characters without capture group.",
                "pattern": "Special characters are \\w*",
                "log": "Special characters are $()|<\\",
                "end_match": " $()|<\\",
                "captured_groups": []
            }
        ]
    },
    {
        "description": "[Functionality] Special characters. '^'",
        "batch_test": [
            {
                "description": "'^' test: Start of string without digits. Dont match",
                "pattern": "^(\\d+)",
                "log": "hi digits",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "'^' test: Match without special caracter",
                "pattern": "\\d+^\\d\\d\\d",
                "ignore_result": false,
                "log": "123^456",
                "end_match": "6",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234",
                "end_match": "4",
                "captured_groups": [
                    "1234"
                ]
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^\\d+",
                "log": "1234",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^\\d+",
                "log": "1234",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234asd",
                "end_match": "4asd",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234asd",
                "end_match": "4asd",
                "captured_groups": [
                    "1234"
                ]
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^\\d+",
                "log": "1234asd",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^\\d+",
                "log": "1234asd",
                "end_match": "4",
                "captured_groups": []
            }
        ]
    },
    {
        "description": "[Functionality] Special characters. '$'",
        "batch_test": [
            {
                "description": "'$' test: End of string. Without digits. Dont match",
                "pattern": "(\\d+)$",
                "log": "hi digits",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "'$' test: Match without special caracter",
                "pattern": "\\d+$\\d\\d\\d",
                "log": "123$456",
                "end_match": "6",
                "captured_groups": []
            },
            {
                "description": "'$' test: end of string.",
                "pattern": "(\\d\\d\\d\\d)$",
                "log": "1234",
                "end_match": "4",
                "captured_groups": [
                    "1234"
                ]
            },
            {
                "description": "'$' test: Start of string.",
                "pattern": "(\\d\\d)$",
                "log": "1234",
                "end_match": "4",
                "captured_groups": [
                    "34"
                ]
            },
            {
                "description": "'^' test: Start of string.",
                "pattern": "\\d\\d\\d\\d$",
                "log": "1234",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^\\d+",
                "log": "1234",
                "end_match": "4",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234asd",
                "end_match": "4asd",
                "captured_groups": []
            },
            {
                "description": "'^' test: Start of string.",
                "ignore_result": true,
                "pattern": "^(\\d+)",
                "log": "1234asd",
                "end_match": "4asd",
                "captured_groups": [
                    "1234"
                ]
            },
            {
                "description": "'$' test: End of string.",
                "pattern": "\\D\\D$",
                "log": "1234asd",
                "end_match": "d",
                "captured_groups": []
            },
            {
                "description": "'$' test: End of string.",
                "ignore_result": true,
                "pattern": "\\D\\D$",
                "log": "1234asd",
                "end_match": "d",
                "captured_groups": []
            }
        ]
    },
    {
        "description": "[Functionality] Combine special characters. ['^', '$']",
        "batch_test": [
            {
                "description": "Combine ^$ with non empty string",
                "pattern": "^$",
                "log": "hi digits",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "Combine ^$ with empty string. Should be match",
                "pattern": "^$",
                "log": "",
                "end_match": "",
                "captured_groups": []
            },
            {
                "description": "Combine ^$ with empty string. Should be match, and obtain an empty group",
                "ignore_result": true,
                "pattern": "^()$",
                "log": "",
                "end_match": "",
                "captured_groups": [
                    ""
                ]
            },
            {
                "description": "Combine ^$ with non empty string",
                "pattern": "^$",
                "log": "hi digits",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "Combine ^$ with empty string. Should be match",
                "pattern": "^$",
                "log": "",
                "end_match": "",
                "captured_groups": []
            },
            {
                "description": "Combine ^$ with empty string. Should be match, and obtain an empty group",
                "ignore_result": true,
                "pattern": "^()$",
                "log": "",
                "end_match": "",
                "captured_groups": [
                    ""
                ]
            }
        ]
    },
    {
        "description": "[Functionality] Special characters.  OR with flags ['^', '$','|']",
        "batch_test": [
            {
                "description": "Only last subpattern with capture groups",
                "ignore_result": true,
                "pattern": "^$|^\\d|\\d$|\\s(\\w+\\w)",
                "log": "^hi digits asd",
                "end_match": "s asd",
                "captured_groups": [
                    "digits"
                ]
            },
            {
                "description": "Nothing to match",
                "debug": true,
                "pattern": "^$|^\\d|\\d$|\\s(\\w+)",
                "log": "^hi*digits*asd$",
                "end_match": null,
                "captured_groups": []
            },
            {
                "description": "Only last subpattern with last",
                "ignore_result": true,
                "pattern": "^$|^\\d|\\d$|\\.+",
                "log": "^hi digits asd&",
                "end_match": "&",
                "captured_groups": []
            },
            {
                "description": "match with first",
                "pattern": "\\d\\d\\d\\d$|(\\d\\d\\d\\d)$",
                "log": "2020",
                "end_match": "0",
                "captured_groups": []
            }
        ]
    }
]